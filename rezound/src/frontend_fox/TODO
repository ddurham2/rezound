
--- THINGS TO DO FOR SURE ---

	- there needs to be a key binding for "center" start position or "center" stop position, list this key in the drop down from the CSoundWindow ruler too
		- ??? this listed binding should be read from a list of bindings.... but I don't have that yet

	- need to make a type parameter in the "new sound" dialog... Allow the user to choose among wave, rezound, etc types
		- it can be done with the given extension right now, but the user may not know the extensions... or perhaps the open dialog should have separate filetype entries and it will add the extension chosen
		- right now the backend knows it by file extension, and the backend may need to pop up a subsequent dialog to ask for format specifiy parametesr
		- should be easier now that the code has be reorganized
		- make a dropdown box which is the type to explicitly use or its first item is 'by filename extension'

	- Somehow the registered Translators need to convay a list of file extensions to the frontend.. the front end can turn that into whatever format the frontend needs to make it work for the file dialog
		- an extension and a format name needs to be given (i.e. Wave .wav  Sun/Next .au )
		- in the frontend create a conglomerated list called all file types that includes all the extensions as well as a *.* entry


	- Other commercial audio editors do this, and now I think I know why...
		XXX - When loading a sound it doesn't start zoomed out to see the whole thing.. 
		- if I had a thread always running in the background low priority, I could be calculating peak chunk information while the user isn't looking

	- figure out why the limit isn't always working.. twice I entered 90:00.00 and it didn't stop
		- I haven't seen it since, but with the limit label I should know when it is at least going to happen

	- the 'active' sound window is not staying raised and I don't know why (when focus method is fmActiveButton)

	- set any "stay on top" flags that need to be for dialogs 
		- I don't see anything in the DECOR flags, ask the fox user list about there being any "stay on top" flags

	- inquire to jeroen if FXLabel could become an FXComposite so that the label would go beside, above, below, etc, whatever any child objects there were
		- then I could go thru all the code and anywhere that I declare an FXComposite then put a widget and a lable beside it it could change that to something simpler
		- actually.. I could myself derive from FXLabel and do this, except that label is not derived from composite

	- if the sound is playing and a certain button is pressed (or key also bound to that button) I should place a marker with a given name "cue #" where the number is an integer being kept up with

	- before the first public release, I should create an about dialog:
		- give version, name
		- give authors
		- give introductary instructions
		- give where to go for bugs
		- give where to go for feature requests
		- give a few of the major features hopefully implemented in the future

		- either list these things themselves, or give URLs or file paths of where to find the information
			- could I actually #include the file from the docs directory ?

	- make sure that nothing is being allocated and left around when a file is unable to be loaded at startup...
		- I guess that should go for any load of a sound... that upon having an error (unsupported format perhaps) that nothing be left around...
		- Also if there's  an error creating perhaps the CSoundPlayerChannel that the ASound is deleted and all temp data is cleaned up

	- some of the stuff with repaints after action dialogs show isn't pretty, but its at least functional
		- I tried, but one place to fix some of the problems is to handle all repaint events after an FXModalDialog hide's in its hide() method
		- I called app->flush() but in there, but it didn't seem to help... perhaps X hadn't sent repaint messages yet... but then I called repaint on mainWindow but it didn't help either
		- These issues I may figure out on my own as I learn more about fox, but perhaps it would be nice if the fox author could look at my app and tell me just how to fix it

		- I'm not sure why it's not a problem and perhaps it will be in the future...
			- But, while the pogress dialog is showing, the sound object being worked on is usually locked for resize so if a paint message tried to be processed for the sound window's waveform view it would cause the applicaiton to lock up
			- Perhaps fox doesn't process paint messages in a sparate thread, which is fortunate at the moment, however if he changes this behavior, I would need to probably trylock and just paint the background color if it couldn't lock... Actions usually call refresh after the action is completed, so that should redraw any places where we couldn't update

	- make some checkbox on the mainWindow that disable undo functionality incase they know they don't want it or don't want to incurr the overhead of undo resources
		- the backend already supports this (although it hasn't been tested yet since there's been no frontend means)
		- when an action is done after undo is disabled, I must clear all previous undo history

	- move the undo button to the edit tool bar

	- supply icons for all the windows
		- just new FXIcon(...) instead of passing NULL
		- Will is supposedly doing this

	- decide on exactly what keys to finally bind to by default for play controls
		- all bindings should (at some point in development) be configurable
		- list the default bindings in the FrontendFoxFeatures.txt file and it's copy on the www site

	- the frontend needs a way to tell COSSSoundPlayer and COSSSoundRecorder which device to use
		- I should be able to test this at home since I have 2 sound cards installed

	- rename setHelpText in my FX...ParamValues to setTipText since that's what it's known as in FOX




--- POSSIBLE THINGS TO DO ---

	- in subsequent versions when a default width/height of a dialog changes, I should have stored the version in the registry, if that's older, then I should remove the WindowDimensions key from the registry

	- in order to create multiple taps for an echo effect... I could have the dialog have tabs and each tap could be tap.. there would be buttons outside the tab bar to insert, remove, move left/right the tabs to rearrange the taps

	- right now all the play control buttons are activated on mouse_button_release events, where it might be good to active on mouse button down.... perhaps I could derive my own button class... or get a feature added to FXButton to selected which way it should behave

	- make cues draggable
		- snap them to the start, stop, beginning and end positions
		- maybe even autoscroll when a cue is near the edge if it's not terribly difficult

	- perhaps I should have volume and gain as separate actions... but the same backend code would be used
		- I could even have advanced and normal dialogs for both
		- negative gain could also be used to invert the phase with a gain of -1

	- perhaps I could have the channel select dialog default its check boxes according to the mute buttons of the sound window

	- I should probably pass the factory objects to the channelSelect dialog, since I could use the NxN matrix of radio buttons for the paste edits' channel select dialog and the others could have the default one

	- perhaps put some buttons on the shift dialogs meaning, half, quarter, eight of the selection length
		- I could probably think of other things of this nature for the other actions
		- This would probably be a useful example of implementing a flag which makes a preset mean some percentage of the input value
			- the question is, can I get that input value? or how can I specify it?  Perhaps there would be some defined like: sound length, channel count, sample rate, selection length

	- I still probably need to instatiate a FXFileDialog to use for saving and opening because it doesn't remember the size, view mode, etc.. when it opens each time

	- all the dialogs are based on fixed widths and heights (of the dialog itself)
		- I would rather these widths and heights that I'm passing the dialogs, be minimums
		- I added remember support so it wouldn't be as much of a problem, but perhaps ask the fox people how to get the dialog to make itself large enough for all the inner widgets
		- If I tought about it long enough, I might be able to come up with the answer

	- Put the name of each channel horizontally along the left of the channels so that if the sound is 5 channels you label the first 2 'left' and 'right' then the next ones 'center', 'rear left' and 'rear right' 
	
	- if the frontend gets too slow about saving user presets, I could create a gUserPresetFile which stays allocated and doesn't have to reparse the file every time like it does now.





--- DONE ---
	- there are still some issues with scaling I think

	- perhaps create a base class for some of the windows to derive from that remember their locations when last the application was run
		- ??? however fox seems to have a problem with top windows relative coordinates

	- right now the PWD of the open dialog is not maintained across showings of it... I think this is becase teh method I'm using is recreating the open dialog each tiem
		- if CSoundFileManager were to opene it differently, it should fix that
		- ??? however it doesn't maintain the same scroll position in the file listing which would be nice too

	- create a dialog which shows a list of the cues and their times.... perhaps have buttons which set the start or stop position, add remove, etc

	- I need to consider that sometimes a user may not want to affect the cues when editing
		- perhaps this would be a check box on the CChannelSelectDialog and CPasteChannelsDialog
		- or have a check box on the main form which says to adjust cues at all

	- allow the user to make notes and store them within a pool... use a pool of chars

	- in the documentation mention that the right mouse button often does things... whether clicking a button or dragging a scroll bar

	- add seek buttons that move the play position forward to the next cue or backwards to the prior cue

	- I need to make some predefiner buttons on the dialogs of any graph param of common curves, and in flange and delay dialogs
		- have some predines that come with rezound and a way for the user to save them

	- doing a save as needs to update the CLoadedSoundWindow's filename

	- on the record dialog, put a red-led while recording, and put a lable that says what the recording is limited to by actually asking the recorder for the limit it's using

	- need to design a record dialog that has the format selection, real-time level meters, start, redo, stop buttons, create cue buttons (one for anchored, one not), check mark to add cues at the beginning and end of the recorded section, (more useful for insert record)
		- need to modify the ASoundRecorder public interface some, because I need the record dialog to have a start, stop, redo buttons, if you start, then stop, then start again, the second start should void the previous recorded data, but stop should just leave whats there intact

	- set the horz and vert spacing of the channel select dialogs to 1, this should decrease the necessary dialog size

	- it is possible to close the application while a modal dialog is opened... this probably should not be permitted

	- move the undo/redo buttons off of the file tab and to an always visible location (play controls)

	- move to the backend what can be from intializations
		- have two initializations, one for the backend and one for the front

	- move reopen history code (writting to the registry) to the backend
		- create a method in the backend for getting the reopen history items rather than the front end reading directly from the registry

	- need a real default value in the newSound dialog's filename edit, either a temporary name that is incremented each time the dialog shows and check agains the FS, or just 'untitled0.rez'
		- increment a number on "untitled#.rez" until a file doesn't exist
		- this code should actually be in the backend so I don't have to rewrite that code for a different frontend

	- I should probably put whatever code in the frontend (i.e. button handlers in CMainWindow) that could be put in the backend (i.e. would be done by any frontend) into the backend like the file operations already are

	- I need to display the sample rate (and perhaps the number of channels) in the status info of CSoundWindow

	- make the cue list dialog's list box have a fixed width font

	- add tip text support to the reusable slider and graph widget to and allow a way to set it in the base class dialogs

	- I should use FXAccelTable so that I can make key bindings to things like 
		- (ctrl-a)select all (space)play, (space)stop, (p)pause, (a,z)seek, (ctrl-c)copy, (ctrl-x)cut, (ctrl-d,del)delete, (ctrl-v)paste, etc
		- make keys for zooming out full
		- this should be relatively simple I think... 

	- I was able to create a preset named "3 seconds" which is invalid when it reparses, but verifyKey should have caught it

