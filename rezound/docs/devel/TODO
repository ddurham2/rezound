--- THINGS TO DO FOR SURE ---

	- Not only should there be a record button that creates a new file, but I should create an action called 'insert record' that can be undone and inserts recorded data at the select start position, I suppose 'replace record' would delete the selection and insert there, and then overlay record which doesn't relace all the selection, but replaces audio until recording stops
		- and just like the other paste methods, a short cross fade should be used when transitioning
		- to do this, I should go ahead and abstract clipboard into a base class and have the paste methods use this base class
			- I would then create several derivations:
				- system clipboard
				- application clipboard (of which I would probably have 3, A B C) or something
				- record clipboard --  when it got asked for data (or asked to put the data to some where(explained below)) it would pop up the record dialog, record, then would supply that data to read from
					- it would be invalid to copy into the record clipboard, just throw an exception
					- for efficiency's sake, perhaps let a clipboard have a method which copies the data for the user of the clipboard (given an ASound and location and length).  Then for record, we could speed things up by having recorded into the same pool file and then just do a move data method on the pool file.
						- the other implementations would just behave as normal.

	- Need a hot key or event that keeps the play position on screen.. only do something if it's not on screen

	- When it's up on sourceforge (and ready to debut) announce to:
		- demudi
		- demudi-users
		- sox-users
		- foxgui-users
		- kurzlist [OT]
		- the individuals who emailed me from kurzlist: "any linux users out there"
		- the few individuals that reponded to my developer call on demudi

		- note: (something like this)
			   I'm annoucing the release of my sound editor, ReZound, on sourceforge now.  This message is going to many people
			and lists which I posted messages concerning it over the past few months.  Any developers out there interested in
			developing for it, I have written a document which explains the basics of creating new actions for it.  And any 
			one else out there willing to run it, please do.  However, you can make a personal note of any bugs, but I have
			compiled a list of the most obvious ones here: _url_ .  

			   Please enjoy it, and I hope that ReZound blossoms into a popular sound editing tool primarily for, but not
			limited to, linux.

	- Need to make all actions have the ability to blend the edges of the affected audio with the existing audio
		- let there be a parameter which says in milliseconds how long the blend takes
		- if not every action, at least paste for editing

	- I've said that I want to support another audio file libary in the future, but I did find that libaudiofile's API at least has support for loop points, cues, notes and arbitrary data, but it doesn't seem to even be implemented on wave save.
		- Perhaps I will work to patch libaudiofile to get this functionality working.  Because SOX's lib form is far from existing
		- libsndfile has more formats than libaudiofile but has no API provisions for arbitrary data. AND it isn't packaged on hardly any distroes
		- Now another possiblity for at least giving a decent effort toward being able to load and save numerous other formats could be done by making a CSOXSound : ASound and have it shell out and actually run the sox command.  Maybe sox can even read and write to std i/o so I could avoid intermediate copies by sending it and receiving from it raw PCM data.
			- This would be under an explicit import/export set of buttons under the file actions because it would probably support no form of saving the cues and notes and such and the user could be warned that none of this information will be preserved.
			- configure should test for `sox` being valid and make it a depenancy... If it's not found, then the import and export file operations will be disabled
				- the configure script should make a big note of this on screen that import/export will be disabled
		- But I should still use libaudiofile to load and save wav, aiff, (ogg and mp3 when it's available)

	- create selection edits which:
		- grow or shrink the selection by a given duration
			- either symetically
			- by moving the start position
			- by moving the stop position

		- grow or shrink the selection by detecting with the audio level rises above or falls below a threshold
			- either symetrically 
			- by moving the start position
			- by moving the stop position

			- and be able to set the window width of the moving average which detects the audio level

		- slide selection to the left or right by a given amount

		- frontend: 
			- grow/shrink(radio buttons)     
			- symtetrically/start/stop(radio buttons)
			- time duration with seconds as the unit (editable slider)
			- threshold with percent as the unit (editable slider)
			- window size in ms as the unit (editable slider)
			

	- always make sure that the actions accessers are const so that it's not causing the data to be written back to disk
		- infact, grep for Accesser and make sure than any are const whenever possible to avoid writing that data back to disk

	- in ddd, step thru a copy/insert action to make sure nothing unexpected is happening
		- when I was taking a file up above 2gb, I copied a 1.2g selection and it seemed to do something for a long time before growing the clipboard file during the copy action

	- need to make front and backend provisions for letting the user specify the export format parameters... some of the parameters depend on the export format... Perhaps I could have a dialog with a tabbed bar which has different parameters on each... which ever bar was activated would be the export format type... Either use the tabbar or radio buttons (real buttons) and a switcher like the switcher test that comes with fox

	- write a little document in Tools/PoolFile that explains simply the layout of how PoolFileAccessors do their thing and perhaps a very simplified explination of how CPoolFile does what it does

	- it is evidently invalid to call ftruncate to make a file bigger if it's on a fat32 mounted device
		- There is a specific errno that comes back from this, I should test for it and fwrite zeros to make the file bigger
		- this would be fixed in src/PoolFile/CMultiFile.cpp

	- right now, if you copy/cut from not all the channels, (by hitting ctrl-cut/copy and deselecting some checkboxes)
		- then when you ctrl-click to paste, the pasteChannels dialog shows up with all the channels that were cut/copied shifted down to lower channel numbers 
		- perhaps I could create pools but not put data into them, for the un-included copy/cut channels, but know to disable the check boxes in the GUI if the pool is zero length

	- Need someone like a sound engineer who can create interesting names and settings for presets of the effect
		- He would also be good to suggest new parameters for the effects

	- I want to a a gain or volume parameter for pasting data... Be able to apply that gain to the sound... 
		- it'd probably come up when you right click on the paste buttons
	- There needs to be a dialog for choosing the mix method for mix pasting



--- POSSIBLE THINGS TO DO ---

	- could easily make the play buttons stop if playing and then do their action so that they don't do nothing while it's playing
		- plus you have to hit stop and play to make it do something else... stop needs to be nice and big anyway

	- I could probably move most of initializeReZound into the backend

	- I could add an advanced mode for copy/cut/paste where the user can choose from multiple clipboards
		- perhaps one way to implement this would be to have multiple instantiated ASoundClipboard objects in an array one may point to a system clipboard and others to CPoolFile clipboard
		- interface:
			- either advanced mode for copy/cut/paste
			- or a dropdown list somewhere on the mainform

	- it may be more intutive/user-friendly/athetically-pleasing to have the channel select dialog start out all unchecked so I acutally clikc on the channels I want to apply the action to, rather than the inverse of the channels...
		- I should also probably add a button that selects all chanels or unselects all changes
			- this would be stupid right now, but more useful if I support 5 channel sounds or something
		- I should put a button on the channel select dialog (and paste channel dialog) which set it to a normal state

	- I could create a method in TPoolFileAccessor that can copy from another TPoolFileAccessor of the same type... It could do memcpys from the cachedBuffers instead of manually having to do a for loop calling operator[] and being enefficient
		- do some timing tests before and after to see the speed increase

		- places to use it epecially are:
			- AAction::backup/restoreUndoSelection
			- CCopyCutDeleteEdit::doActionSizeSafe

	- when making loops, it may be cool to have a play button that loops the selection, but skips the bulk of the middle for time's sake
	- when editing large files it would be nice ot have play selection buttons (once and looped), but it plays a few seconds before the start to a few seconds after the stop so that you don't have to play from the beginning and seek forward to or play the selection and seek backwards a little bit

	- probably want to add an bool AAction::showAllDataCheckbox() so that the channel select dialog may or may not have that checkbox if it's an action like crop, or trim

	- perhaps make pool file have a readonly mode where it won't create SAT files and modify it in any way, then even a copy wouldn't need to be made

	- perhaps actions that change the length of the sound could possibly know how much to change the play position if it's playing just so when the action returns it continues at roughly the same place

	- maybe change fox's built in icons for the standard file dialog, they don't fit the rest of fox's theme
		- this will probably be a patch submitted to them
		- or I can wait until fox is themeable and this might be fixed because the theme would supply these icons

	- a very nice project called 'ardour' on sourceforge.net has setup a paypal account to receive donations, perhaps I should do the same

	- look at sox's code for more effect algorithms




--- KNOWN BUGS/GLITCHES ---
	- OUTSTANDING -
		- I've seen it once hang when closing the application... I attached to the process with the debugger and it was stuck waiting on a mutex of loaded->getSound()->lockForResize() in ASoundFileManager::close ... so perhaps some condition happened which left a mutex unlocked
		- It's not reproducable, but I've seen Xlib return something which causes the application to lock up; fox even prints an 'unexpected ...' message, VERY seldom though

		- I didn't notice this being a problem until I upgraded to Mandrake 8.2 with the 2.4.18 kernel, but when closing a large (80megs) file it would write all the meta data to end of the file.  Each write caused a call to ftruncate to make the file a little bigger each write.  ftruncate seemed to be taking quite a longer time than before because the program would seem to have on closing the file.
			- However, I have avoided the problem for now by change TPoolFile::closeFile to not write the meta data if the file is about to be removed.  
			- I should test this with a later kernel in a few weeks and see if the problem is still there.  If so, I should avoid calling ftruncate so often by preallocating some space.


	- FIXED - 
		- glitches occurr at the beginning and/or end of a CChangeRateEffects... 
		- determining the 'active' window has not been resolved yet... For now, it's just the last sound that was loaded... and if you close that sound... there is no active window until you open another sound... Hence there is no advantage at the moment of having more than one sound loaded
		- closing sound windows with the top left button doesn't work right yet... it simply hides the window
		- clicking the right button while dragging a node after creation of the FXGraphParamValue widget messing things up... I think it's a bug in FOX 
		- goofy stuff happens with the graph param value widget... orphaned nodes and stuff
		- pressing the space bar key on the loaded sound listbox while it's empty causes a segfault.. I think it's a problem with fox itself
			- I think it's trying to focus an item that doesn't exist (Jeroen fixed it in fox)





--- EXPERIMENTS THAT MIGHT LEAD TO SOMETHING COOLER ---
	- try a little effect that reverse little chunks of data ... say every x samples... what would that sound like?

	- see if I could determine the tempo of a selection from an impulse analysis
		- I could already know that it's most likely in the range of 40 to 250 or so
		- perhaps it could even just figure out the quarter notes and add a metranome which could deviate from a constant value





--- FUTURE IDEAS ---
	- if pool file is 64bit and just that stable, I could load all sounds into a single pool file each with they're different pools and some how have that as an advantage for being able to move data from one pool to another instantaneously
		- but that may not be much of an advantage

	- I could create an event manager that could act as a multitrack editor, by just knowing when and where to stop and start sounds
		- then how to scale their volume... or more generally, what filter(s) to sent the data-buffers thru before playing
			- the filters should be instantiated AFilter objects that are attatched to the sound, in a chain and they were instantiated with parameters on how to do their realtime processing
			- if I thought it would be that beneficial, I could make all the non-realtime actions use the filters to do their work
		- it would then be just a matter of GUI creation to have ReZound act something like audacity

	- I could determine the most recent cue passed while playing at the beginning of each time I go to mix some sound... and set just an integer index in the ASoundPlayerChannel object for the frontend to read and display the current playing cue name in a status bar
		- I'm not implementing this right away because I don't know how useful it would be... But there were lots of off screen cues, it could be useful to have an idea of where the sound was playing 
		- If I do implement this, I should create a method in ASound which returns the most recent cue, and call it at each mix buffer call... This method should use the cue index in ASound for effient finding of this value

	- for multi-track editing, I could create a derivation of ASound that wraps around a given ASound that returns peak data according to the volume envelopes
		- I would need to address how real-time effects get inserted into the play queue, perhaps ASoundPlayer could support that or CSoundPlayerChannel could contain the logic to mixData onto the buffer...
			- then different playback rates and formats could be handled by just having an initial convertion to the native format that ASoundPlayer was created with

	- I could implement a C++ base class which was a 'value generator' which would have dervations for constant, sin, trangle, etc... Then a frontend widget could be created to select which dervation to use and what parameters... then this class could be used as action parameters to more generalize how they work... Somethings probably couldn't be these because the parameter may have to be constant or is just too complex to figure out with such generality... however I'm thinking about rate changes and the rate curve... perhaps if the value generator could give it's first derivative it could be done

	- see the sub-notes under multi-track editing for a way to playback non-native sample rates

	- I could have copy and cut's copy to the clipboard delayed until a non-paste function and a not a paste function to the same range and sound that we cut/copied from
		- that way, a copy from one sound and an immediate paste into another would not require but one copy
		- if multiple clipboards are supported, I should maintain different state information per clipboard
			- where basically the clipboard object doesn't do it's task until AAction tells it to... and AAction doesn't tell it to until a non-paste action is performed
				- and two consecutive copies to the same clipboard should just overwrite the previous information, that way one accidental copy is not costly (it would happen if the second action was a non paste tho)

	- put on the website a wish list of features
		- I could allow people to request new idea's for features where they explain their idea
		- and also vote on existing ideas that I would explain (like multi-track editing, however there is already audacity out there)
		- also give a relative expense to implementing such a feature

	- if a button like: undo, play, stop, etc does not perform its action (make return value bool) then call a method, incompleteAction() that either beeps or buzzes just to let the user know that there was no action take...

	- one cool set of plugins might be ones that have tools for doing manipulations that loop symetrically, for example:
		- copy the selection, reverse the original, insert the copy in front, the we have a loop-able sound
		- some variations on the previous that break the selection into smaller peices of size X to which it does this action where where X is a parameter set in a dialog
			- or breaks the selection into N peices
		- apply some symetric envelope to the sound (i.e. /|_|\, /\, /W\, \/, \M/, etc)
		- apply some envelope that gives the sound a beat (i.e. ||_|_|_|_ or //_/_/_/_ or \\_\_\_\_  (that is, an accent on the first beat))
		- vibrato

	- develop or more likely use an existing DSP library in actions

	- 'vinyl record' operations
		- predefined scratches for the CChangeRateEffect (that means it probably needs to be able to play backwards)
		- add the pop,scratch,snap,ca-pop sound to a selection
			- the rpm setting would have also probably affected this
		- be able to add that 'bah-domp' sound when you put the needle to the record
		- add a repeat that makes it sound like a broken record... input should be how many times.. then perhaps a 'errrtt, and continue'
		- add a tube amp filter
		- be able to make it sound like it's at the end of a record
		- perhaps there are some EQ settings that were characteristic of old vinyl recordings
		- adjust pitch to rpms 33, 45, 78
		- some of these could probably most easily be created by using real samples of record sounds, just mixing them into the sound

	- 'censor' operations
		- have a set of buttons that place a tone or other sample over the selected sound
		- or one that quickly fade out and in the selection

	- if I had a class which encompassed the parameters to any AAction, then if I made this object streamable I could stream it to a file and have repeatable actions where the user could save them
		- so, some complicated envelope for amplitude or pitch could be apply to a sound once today, and again tomorrow after the whole application has been re-run

	- I could conceive of a dialog for rate and/or pitch changes that has a place for you to enter the original frequency of the sound (could be detected with fft), and then allow you do select a particular pitch/freq/note value (i.e. Bb) to transpose it to
		- this would be useful for making sampled patches for a synthesizer
		- same could go for a drum loop and BPMs... have an original BPM, and then select a new BPM







--- DONE ---

	- perhaps if the undo information were in the CPoolFile of the loaded sound, we could handle undo of deletes very quickly by simpling moving those blocks to the undo pool

	- I need to give options of:
		- when a pool file was detected upon loading... ask the user if they want to use that "Would you like to resume editing ... ?" or delete it

	- I really need to create peak data and render that, because it takes forever to redraw the screen for a big file when the waveform is 'fit' into the window
		- I should probably show a status bar whenever I'm recalculating render data

	- fix any problems with zero or 1 length sounds
		- very small sounds attempt to set the range of the horz zoom control where the hi is less than the lo
		- FIXED by never allowing an ASound object to become less than one sample in length

	- well.. I went to all the trouble of creating CPoolFile which quickly adds and remove space from th emiddle of the data... but
		- ...but doing undo requires me to copy the data when deleting or cuting...
		- if the undo information was in the same CPoolFile as the sound itself.. then perhaps CPoolFile could make a moveData method which just moves data from one pool to another
		- this would at least speed up delete and cut

	- I could put a defrag button just like there is a redraw button

	- need to do two very important but unfun things before continuing much further
		- typedef the sizes and positions for accessing audio so that 64bit sizes will be no problem
			- need type for integral sample position
			- need type for decimal sample position
			- need a type for integal sample count
		- create a MIX_SAMPLE_TYPE (or CALC_SAMPLE_TYPE) which can hold multiple mixed SAMPLE_TYPES for use when holding values while processing that will later be truncated when written to the real audio output
			- I could probably rename it to sample_t and mix_sample_t

	- need to make an isModified flag in the CLoadedSound structure.. perhaps actually in the ASound class... then AAction will set it to true while saveSound will set it to false
	- right now, I always ask if to save the file... I should have a flag in CLoadedSound which is set whenever an AAction does something to that file

	- test a *.rez file with an invalid signature and see what happens
		- it threw an exception as it should have, however when I compiled on my machine at work, the throwing of an except cause a segfault.. but I believe it was compiler/library problems and not my fault

	- make progress bar when loading a sound, because a copy is always made, unless it's opened as read only

	- add status bars to all the actions.. use CStatusComm to communicate with a front end status bar
		- on copy/cut actions, when I'm using TPoolAccesser::copyData or TPoolAccesser::zeroData, divide the length to do into 100 parts and call the copyData or zeroData methods 100 times... but don't divide it into sections smaller than say 1 million samples or so

	- put some 'mute channel' check boxes for each channel of a loaded sound in the frontend and and be able to mute channels within CSoundPlayerChannel

	- create TStaticPoolAccesser::copyData(from another accesser of same alignement) and TStaticPoolAccesser::zeroData() 
		- which will use memcpy to speed up data copying and initialization by removing the overhead of calling operator[] so much

	- I should also probably have a 'clear undo history' button that frees up used space in the pool file... 

	- CPoolFile may need a flush method.. (if it doesn't already have one.. ) then after every action, we should flush the pool file incase of a subsequent crash

	- it segfaulted once upon closing while playing... but calling deinitialize should fix that 

	- there are some unfortunate side effects of the way I currently do peak chunk rendering
		- either there is a flaw in my idea
		- or I didn't implement my idea quite correctly
			- perhaps the implementation of ASound::addSpaceToChannel,removeSpaceFromChannel,moveSpaceOutOfChannel where it handles the peak chunk accessers isn't quite right
		- but I suspect that it has to do with my not recalculating all the peak chunks
		XXX - sometimes if you delete data from a sound, then hit redraw, the rendering changes slightly
		XXX - also, when I mute some space, then have that muted space at the end of a crop, there is sometimes a sample that shows up at the end of the new selection that will go away if I just hit redraw, so it's a peak chunk data inconsistancy rather than non-muted audio data being there

	- use home directory / .rezound instead of the current directory for settings registry

	- When it's on sourceforge put out a call for icon artists and for someone to autoconfiscate it

	- When it's on sourceforge create mailing lists or forums for:
		- bugs
		- feature requests
		- users
		- developers


	- make sure I've run dos2unix on all the code before checking it into any version control system

	- for additional bookmark niceness... make a way to set either the start or stop position to a bookmark choosen from a drop down menu
		- also make a seek button that cycles to the next nearest book bark forward or backward from the current play position

	- need a shuttle control

	- the right click on the horz ruler bar should have
		- start pos, stop pos, start, end, AND play pos
		- and perhaps all the markers too


	- make sure you can't open the same file twice
		- what about hardlinks?

	- have seek buttons that move the play pointer, start and stop positions to the markers set within the audio...
		- the play position seek should:
			- on forward, go to the nearest marker forward
			- on backward go to the nearest marker backward if the play position is more than .25 secs from it.. or 2 markers back if more

