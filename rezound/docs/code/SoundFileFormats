
ASound is the base class that represents a manipulatable set of audio data within ReZound.  Its
contents are PCM data in a specific format.  Any supported file format is to be implemented by
deriving from ASound and performing the necessary logic to read the audio data from the foreign
format and put it into ASound as the native format.

Therefore, all foreign formats are 'imported' and 'exported' rather than loaded and saved
	- ??? I have manually implemented: .wav, and .au formats, but I could use libsndfile
	  or sox to support many other formats.  These implementations I have written actually
	  do not support all the features of those formats.  If I did use a 3rd party library
	  it would need to have the ability to get the data in PCM form...

The native ReZound file format is actually a CPoolFile which is the container of all 
the audio data and information about that audio data.  Except when a ReZound native file
is loaded, actually a copy is made so as not to be working on the original data.

ASound has a getData method which returns a CPoolFileAccessor that allows access to the data.  It
also has methods to manipulate the size of the data which manages how to add/remove space when an 
action which changes the size of the data but the action was not applied to all channels.

CPoolFile is explained more in CPoolFile.cpp/h, but basically it is a container of arbitrary
data, but manages its space in chunks which allow it to add and remove space very quickly.  
Hence, delete or adding space anywhere in the sound file is not laborious, as the new space
can be added physically whereever there is available space, but logically anywhere else, and 
deleted space just becomes logically unused.  All the data lives on disk, except there is 
considerable caching which speeds up usual data access.  However, CPoolFile has a higher 
level of organization called 'pools' in which a CPoolFile is a collection of many pools where
ASound maintains PCM data of one channel in a pool named 'Channel 1' and data of another channel
in 'Channel 2' etc.  Also, format information about the PCM data is in a pool named 'Format'.  
Calculated peak data is also in pools called 'Peak Channel 1'...
Additional pools in the future may be used to contain other information without interfering with
the current implementation.




